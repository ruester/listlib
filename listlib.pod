=encoding utf8

=head1 NAME

=over 1

=item listlib - a generic list library

=back

=head1 SYNOPSIS

=over 1

=item B<#include <listlib.hE<gt>>

=back

=head1 DESCRIPTION

=head2 Structures

=over 4

=over 4

 The listlib contains following structures:
 
 struct listlib_list {
     void *first, *last;
     unsigned long count;
 }
 
 struct listlib_element {
     struct listlib_element *next, *prev;
 }
 
 Structures you want to add to the listlib_list have to look like this:
 
 struct my_structure {
     struct listlib_element foo;
     ...
 }

=back

=back

=head2 Functions

=over 4

=over 4

 Following functions are provided:

=back

=back

=over 5

=over 4

=item B<struct listlib_list *listlib_safe_create_list(void);>

 Allocates memory for a listlib_list structure
 and returns a pointer to the allocated memory.
 If allocation fails the program will exited.

=item B<struct listlib_list *listlib_create_list(void);>

 Allocates memory for a listlib_list structure
 and returns a pointer to the allocated memory.

=item B<unsigned long listlib_free_list(struct listlib_list *>I<list>B<);>

 Frees the allocated memory of the list, which must have been returned
 by a previous call of listlib_safe_create_list() or listlib_create_list().
 The number of remaining elements in the list is returned.

=item B<void *listlib_remove_element(struct listlib_list *>I<list>B<, void *>I<element>B<);>

 Removes the element from the list.
 If the element is NULL or the list does not
 contain the element undefined behaviour occurs.

=item B<void listlib_push(struct listlib_list *>I<list>B<, void *>I<element>B<);>

 Adds the element at the end of the list.
 If the element or the list is NULL undefined behaviour occurs.

=item B<void *listlib_pop(struct listlib_list *>I<list>B<);>

 Removes the last element of the list and returns it.
 The list must contain at least one element.

=item B<void listlib_unshift(struct listlib_list *>I<list>B<, void *>I<element>B<);>

 Adds the element at the beginning of the list.
 If the element or the list is NULL undefined behaviour occurs.

=item B<void *listlib_shift(struct listlib_list *>I<list>B<);>

 Removes the first element of the list and returns it.
 The list must contain at least one element.

=item B<unsigned long listlib_index_of_element(struct listlib_list *>I<list>B<, void *>I<element>B<);>

 Returns the index of the element.
 The first element has the index 1.

=back

=back

=head2 Macros

=over 4

=over 4

 Following macros are provided:

=back

=back

=over 5

=over 4

=item B<listlib_first(>I<listlib_list>B<)>

 macro for the first element of the list

=item B<listlib_last(>I<listlib_list>B<)>

 macro for the last element of the list

=item B<listlib_next(>I<listlib_element>B<)>

 macro for the pointer to the next element

=item B<listlib_prev(>I<listlib_element>B<)>

 macro for the pointer to the previous element

=item B<listlib_count(>I<listlib_list>B<)>

 macro for the number of elements in the list

=back

=back

=head1 EXAMPLE

 #include <stdlib.h>
 #include <string.h>
 #include <stdio.h>
 #include <listlib.h>
 
 struct person {
     struct listlib_element h;
     int age;
     char name[10];
 };
 
 int main(int argc, char *argv[])
 {
     struct person p1, p2, p3;
     struct person *temp;
     struct listlib_list *person_list;
 
     person_list = listlib_safe_create_list();
 
     p1.age = 30;
     strcpy(p1.name, "Max");
 
     p2.age = 45;
     strcpy(p2.name, "Paul");
 
     p3.age = 20;
     strcpy(p3.name, "Linda");
 
     listlib_unshift(person_list, &p1);
     listlib_unshift(person_list, &p2);
     listlib_push(person_list, &p3);
 
     temp = listlib_pop(person_list);
     printf("%s is %d years old\n", temp->name, temp->age);
     free(temp);
 
     temp = listlib_pop(person_list);
     printf("%s is %d years old\n", temp->name, temp->age);
     free(temp);
 
     temp = listlib_shift(person_list);
     printf("%s is %d years old\n", temp->name, temp->age);
     free(temp);
 
     listlib_free_list(person_list);
 
     return(0);
 }

=head1 COPYRIGHT

 Copyright (C) 2010 Matthias Ruester <ruester@molgen.mpg.de>
 Copyright (C) 2010 Max Planck Institute for Molecular Genetics
