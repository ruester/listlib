.\" Automatically generated by Pod::Man 2.12 (Pod::Simple 3.04)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sh \" Subsection heading
.br
.if t .Sp
.ne 5
.PP
\fB\\$1\fR
.PP
..
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.Sh), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.if \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "listlib 3"
.TH listlib 3 "listlib" "0.7" "listlib"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
.IP "listlib \- a generic list library" 1
.IX Item "listlib - a generic list library"
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.PD 0
.IP "\fB#include <listlib.h>\fR" 1
.IX Item "#include <listlib.h>"
.PD
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
.Sh "Structures"
.IX Subsection "Structures"
.RS 4
.Vb 1
\& The listlib contains following structures:
\& 
\& struct listlib_list {
\&     void *first, *last;
\&     unsigned long count;
\& }
\& 
\& struct listlib_element {
\&     struct listlib_element *next, *prev;
\& }
\& 
\& Structures you want to add to the listlib_list have to look like this:
\& 
\& struct my_structure {
\&     struct listlib_element foo;
\&     ...
\& }
.Ve
.RE
.RS 4
.RE
.Sh "Functions"
.IX Subsection "Functions"
.RS 4
.Vb 1
\& Following functions are provided:
.Ve
.RE
.RS 4
.RE
.RS 5
.IP "\fBstruct listlib_list *listlib_safe_create_list(void);\fR" 4
.IX Item "struct listlib_list *listlib_safe_create_list(void);"
.Vb 3
\& Allocates memory for a listlib_list structure
\& and returns a pointer to the allocated memory.
\& If allocation fails the program will exited.
.Ve
.IP "\fBstruct listlib_list *listlib_create_list(void);\fR" 4
.IX Item "struct listlib_list *listlib_create_list(void);"
.Vb 2
\& Allocates memory for a listlib_list structure
\& and returns a pointer to the allocated memory.
.Ve
.IP "\fBunsigned long listlib_free_list(struct listlib_list *\fR\fIlist\fR\fB);\fR" 4
.IX Item "unsigned long listlib_free_list(struct listlib_list *list);"
.Vb 3
\& Frees the allocated memory of the list, which must have been returned
\& by a previous call of listlib_safe_create_list() or listlib_create_list().
\& The number of remaining elements in the list is returned.
.Ve
.IP "\fBvoid *listlib_remove_element(struct listlib_list *\fR\fIlist\fR\fB, void *\fR\fIelement\fR\fB);\fR" 4
.IX Item "void *listlib_remove_element(struct listlib_list *list, void *element);"
.Vb 3
\& Removes the element from the list.
\& If the element is NULL or the list does not
\& contain the element undefined behaviour occurs.
.Ve
.IP "\fBvoid listlib_push(struct listlib_list *\fR\fIlist\fR\fB, void *\fR\fIelement\fR\fB);\fR" 4
.IX Item "void listlib_push(struct listlib_list *list, void *element);"
.Vb 2
\& Adds the element at the end of the list.
\& If the element or the list is NULL undefined behaviour occurs.
.Ve
.IP "\fBvoid *listlib_pop(struct listlib_list *\fR\fIlist\fR\fB);\fR" 4
.IX Item "void *listlib_pop(struct listlib_list *list);"
.Vb 2
\& Removes the last element of the list and returns it.
\& The list must contain at least one element.
.Ve
.IP "\fBvoid listlib_unshift(struct listlib_list *\fR\fIlist\fR\fB, void *\fR\fIelement\fR\fB);\fR" 4
.IX Item "void listlib_unshift(struct listlib_list *list, void *element);"
.Vb 2
\& Adds the element at the beginning of the list.
\& If the element or the list is NULL undefined behaviour occurs.
.Ve
.IP "\fBvoid *listlib_shift(struct listlib_list *\fR\fIlist\fR\fB);\fR" 4
.IX Item "void *listlib_shift(struct listlib_list *list);"
.Vb 2
\& Removes the first element of the list and returns it.
\& The list must contain at least one element.
.Ve
.IP "\fBunsigned long listlib_index_of_element(struct listlib_list *\fR\fIlist\fR\fB, void *\fR\fIelement\fR\fB);\fR" 4
.IX Item "unsigned long listlib_index_of_element(struct listlib_list *list, void *element);"
.Vb 2
\& Returns the index of the element.
\& The first element has the index 1.
.Ve
.RE
.RS 5
.RE
.Sh "Macros"
.IX Subsection "Macros"
.RS 4
.Vb 1
\& Following macros are provided:
.Ve
.RE
.RS 4
.RE
.RS 5
.IP "\fBlistlib_first(\fR\fIlistlib_list\fR\fB)\fR" 4
.IX Item "listlib_first(listlib_list)"
.Vb 1
\& macro for the first element of the list
.Ve
.IP "\fBlistlib_last(\fR\fIlistlib_list\fR\fB)\fR" 4
.IX Item "listlib_last(listlib_list)"
.Vb 1
\& macro for the last element of the list
.Ve
.IP "\fBlistlib_next(\fR\fIlistlib_element\fR\fB)\fR" 4
.IX Item "listlib_next(listlib_element)"
.Vb 1
\& macro for the pointer to the next element
.Ve
.IP "\fBlistlib_prev(\fR\fIlistlib_element\fR\fB)\fR" 4
.IX Item "listlib_prev(listlib_element)"
.Vb 1
\& macro for the pointer to the previous element
.Ve
.IP "\fBlistlib_count(\fR\fIlistlib_list\fR\fB)\fR" 4
.IX Item "listlib_count(listlib_list)"
.Vb 1
\& macro for the number of elements in the list
.Ve
.RE
.RS 5
.RE
.SH "EXAMPLE"
.IX Header "EXAMPLE"
.Vb 4
\& #include <stdlib.h>
\& #include <string.h>
\& #include <stdio.h>
\& #include <listlib.h>
\& 
\& struct person {
\&     struct listlib_element h;
\&     int age;
\&     char name[10];
\& };
\& 
\& int main(int argc, char *argv[])
\& {
\&     struct person p1, p2, p3;
\&     struct person *temp;
\&     struct listlib_list *person_list;
\& 
\&     person_list = listlib_safe_create_list();
\& 
\&     p1.age = 30;
\&     strcpy(p1.name, "Max");
\& 
\&     p2.age = 45;
\&     strcpy(p2.name, "Paul");
\& 
\&     p3.age = 20;
\&     strcpy(p3.name, "Linda");
\& 
\&     listlib_unshift(person_list, &p1);
\&     listlib_unshift(person_list, &p2);
\&     listlib_push(person_list, &p3);
\& 
\&     temp = listlib_pop(person_list);
\&     printf("%s is %d years old\en", temp\->name, temp\->age);
\&     free(temp);
\& 
\&     temp = listlib_pop(person_list);
\&     printf("%s is %d years old\en", temp\->name, temp\->age);
\&     free(temp);
\& 
\&     temp = listlib_shift(person_list);
\&     printf("%s is %d years old\en", temp\->name, temp\->age);
\&     free(temp);
\& 
\&     listlib_free_list(person_list);
\& 
\&     return(0);
\& }
.Ve
.SH "COPYRIGHT"
.IX Header "COPYRIGHT"
.Vb 2
\& Copyright (C) 2010 Matthias Ruester <ruester@molgen.mpg.de>
\& Copyright (C) 2010 Max Planck Institut for Molecular Genetics
.Ve
